import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import sheep.expression.Expression;
import sheep.expression.ExpressionFactory;
import sheep.expression.arithmetic.*;
import sheep.parsing.Parser;
import sheep.parsing.ParseException;
import sheep.parsing.SimpleParser;

public class SimpleParserTest {

    @Test
    public void testParseEmptyString() throws ParseException {
        ExpressionFactory factory = new ExpressionFactory();
        Parser parser = new SimpleParser(factory);
        Expression result = parser.parse("");
        assertEquals(factory.createEmpty(), result);
    }

    @Test
    public void testParseEqualExpression() throws ParseException {
        ExpressionFactory factory = new ExpressionFactory();
        Parser parser = new SimpleParser(factory);
        Expression result = parser.parse("1=2");
        assertEquals(new Equal(new IntegerLiteral(1), new IntegerLiteral(2)), result);
    }

    @Test
    public void testParseLessExpression() throws ParseException {
        ExpressionFactory factory = new ExpressionFactory();
        Parser parser = new SimpleParser(factory);
        Expression result = parser.parse("1<2");
        assertEquals(new Less(new IntegerLiteral(1), new IntegerLiteral(2)), result);
    }

    @Test
    public void testParsePlusExpression() throws ParseException {
        ExpressionFactory factory = new ExpressionFactory();
        Parser parser = new SimpleParser(factory);
        Expression result = parser.parse("1+2");
        assertEquals(new Plus(new IntegerLiteral(1), new IntegerLiteral(2)), result);
    }

    @Test
    public void testParseMinusExpression() throws ParseException {
        ExpressionFactory factory = new ExpressionFactory();
        Parser parser = new SimpleParser(factory);
        Expression result = parser.parse("1-2");
        assertEquals(new Minus(new IntegerLiteral(1), new IntegerLiteral(2)), result);
    }

    @Test
    public void testParseTimesExpression() throws ParseException {
        ExpressionFactory factory = new ExpressionFactory();
        Parser parser = new SimpleParser(factory);
        Expression result = parser.parse("1*2");
        assertEquals(new Times(new IntegerLiteral(1), new IntegerLiteral(2)), result);
    }

    @Test
    public void testParseDivideExpression() throws ParseException {
        ExpressionFactory factory = new ExpressionFactory();
        Parser parser = new SimpleParser(factory);
        Expression result = parser.parse("1/2");
        assertEquals(new Divide(new IntegerLiteral(1), new IntegerLiteral(2)), result);
    }

    @Test
    public void testParseInvalidExpression() {
        ExpressionFactory factory = new ExpressionFactory();
        Parser parser = new SimpleParser(factory);
        assertThrows(ParseException.class, () -> parser.parse("invalid"));
    }
}